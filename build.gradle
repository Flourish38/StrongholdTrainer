plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

// This is a draft of a build.gradle that will bundle TensorFlow and its native backend* with the mod JAR, allowing it to load.
// It edits remapJar to remap a shadow jar (w/ dependencies).

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

minecraft {
    accessWidener = file("src/main/resources/strongholdtrainer.aw")
}

dependencies {
    minecraft "com.mojang:minecraft:1.16.1"
    mappings "net.fabricmc:yarn:1.16.1+build.21:v2"
    modImplementation "net.fabricmc:fabric-loader:0.11.3"

    compile group: 'org.tensorflow', name: 'tensorflow-core-api', version: '0.3.1'
    compile group: 'org.tensorflow', name: 'tensorflow-core-platform', version: '0.3.1'

    modRuntime ("com.github.SuperCoder7979:databreaker:0.2.5") {
        exclude module: "fabric-loader"
    }

    //Fabric api
    //modImplementation "net.fabricmc.fabric-api:fabric-api:0.18.0+build.387-1.16.1"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }


}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Configures shadowJar to use compile dependencies. Edits remapJar to use the shadow jar as its input
shadowJar {
    classifier "shadow"
    configurations = [project.configurations.compile]
    remapJar {
        dependsOn shadowJar
        input.set shadowJar.archiveFile.get()
        remapAccessWidener.set false
    }
    minimize()
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}